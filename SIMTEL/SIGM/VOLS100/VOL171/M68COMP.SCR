( M68K Cross compiler -- Copyright Notice )                     ;S                                                              FORTH based cross compiler for the Motorola 68000 microprocessor                                                                Copyright 1983 by   Raymond L. Buvel                                                Box 3071                                                        Moscow, ID 83843                                                                                            All rights reserved except as stated below.                                                                                     This compiler may be distributed to anyone provided this        copyright notice is included and the distribution is not for    profit.  Contact me concerning royalties for commercial         distribution.  There is no royalty on code produced with this   compiler provided the compiler itself is not SOLD as an integralpart of a software package.                                     ( M68000 Compiler load module )                                 CR ." Loading compiling words" CR                               8 LOAD DECIMAL  ( Load the compiling words )                    CR ." Loading control structures" CR                            25 LOAD DECIMAL ( Load the control structures )                 CR ." Loading macro definitions" CR                             34 LOAD DECIMAL ( Load the macro definitionsompiler list screen )                                 : FORM 3 0 DO DUP LIST 1+ LOOP DROP 12 EMIT ;  PRINTER          ." Listing 2:  Page 1 of 13" CR CR 0 LIST 8 LIST 9 LIST 12 EMIT ." Listing 2:  Page 2 of 13" CR CR 10 FORM                      ." Listing 2:  Page 3 of 13" CR CR 13 FORM                      ." Listing 2:  Page 4 of 13" CR CR 16 FORM                      ." Listing 2:  Page 5 of 13" CR CR 19 FORM                      ." Listing 2:  Page 6 of 13" CR CR 22 FORM                      ." Listing 2:  Page 7 of 13" CR CR 25 FORM                      ." Listing 2:  Page 8 of 13" CR CR 28 FORM                      ." Listing 2:  Page 9 of 13" CR CR 31 FORM                      ." Listing 2:  Page 10 of 13" CR CR 34 FORM                     ." Listing 2:  Page 11 of 13" CR CR 37 FORM                     ." Listing 2:  Page 12 of 13" CR CR 40 FORM                     ." Listing 2:  Page 13 of 13" CR CR 43 LIST 44 LIST 12 EMIT     CONSOLE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( M68K Cross Compiler -- Vocabulary definition )                VOCABULARY M68K IMMEDIATE                                       M68K DEFINITIONS                                                HEX                                                             -->                                                             Note.. the compilation words listed below are contained in      the FORTH vocabulary and cause entries to be made in the        M68K vocabulary.                                                                                                                :M68K   :M68MAC M68VAR  M68DVAR M68CON  M68DCON                 M68ARY  M68DARY M68CARY                                                                                                                                                                                                                                                                                                                                                                         ( M68K Cross Compiler -- Variable definitions )                 M68K DEFINITIONS                                                ( Code pointer in M68000 -- note relative addressing ! )        0 VARIABLE M68PCODE                                             ( Variable pool pointer in M68000 -- relative to A5 )           0 VARIABLE M68PVAR                                              ( Entry point of the subroutine being defined )                 0 VARIABLE M68ENTRY                                             ( Parameter field address [ in HOST ] of word being defined )   0 VARIABLE M68PFA                                               -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Variable definitions )                 M68K DEFINITIONS                                                ( Error checking variables )                                    0 VARIABLE M68?MAC ( True if in a MACRO definition )            0 VARIABLE M68K?   ( True if in a SUBROUTINE definition )       0 VARIABLE M68?PAIRS ( Count of incomplete branching opsross Compiler -- Error checking )                       M68K DEFINITIONS                                                : ?M68PAIRS ( Check for unbalanced control structures )                 M68?PAIRS @ IF                                                    ." Error! unbalanced control structure "                        0 M68?PAIRS ! ABORT ENDIF ;                           : ?M68K ( Check for errors in compiling a subroutine )                  M68K? @ 0= IF ( Check if compiling a subroutine )                 ." Error! not compiling a SUBROUTINE "                          ABORT ENDIF ;                                         : ?M68MAC ( Check for errors in compiling a macro )                     M68?MAC @ 0= IF ( Check if compiling a macro )                    ." Error! not compiling a MACRO "                               ABORT ENDIF ;                                         -->                                                                                                                             ( M68K Cross Compiler -- Compile constants )                    M68K DEFINITIONS                                                ( n -- c )                                                      : HIGH-BYTE 8 SHIFT ;  ( Leave high byte of n on stack )        ( n -- )                                                        : $CON  DUP HIGH-BYTE C, C, ; ( Compile const high-byte first ) ( d -- )                                                        : $DCON $CON ( Compile high word )                                      $CON ; ( Compile low word )                             -->                                                             Note.. to transport the compiler to other FORTH systems the     word HIGH-BYTE must be written so that it takes the number off  the top of the stack and leaves the high byte of that number.   On some FORTH systems HIGH-BYTE may have to be a CODE           definition.                                                                                                                     ( M68K Cross Compiler -- Compiling Words )                      M68K DEFINITIONS HEX                                            ( address -- )                                                  : M68MAC ( Compile MACRO code into any definition )                     DUP @ SWAP 2+ OVER HERE SWAP CMOVE ALLOT ;              : M68SUB ( Compile SUBROUTINE code into subroutine definition )         ?M68K 61 C, 00 C,  ( BSR  addr )                                HERE M68PFA @ 2+ -  ( Compute code length )                     M68ENTRY @ + SWAP @ SWAP - ( Compute displacement )             $CON ; ( Compile displacement )                         -->                                                             Note.. the memory image of a MACRO to be compiled is:             addr    Number of bytes of code to compile                      addr+2  Bytes of code to be compiled.                         The memory image of a SUBROUTINE to be compiled is:               addr    Address of subroutine relative to start of code       ( M68K Cross Compiler -- MACRO Compiling Words  )               FORTH DEFINITIONS                                               ( Create header and set compiler variables )                    : :M68MAC ( Begin a MACRO definition )                                  [COMPILE] M68K DEFINITIONS                                      M68K 1 M68?MAC ! <BUILDS HERE M68PFA !                          0 , ( Initialize the number of bytes field )                    DOES> M68MAC ;                                          M68K DEFINITIONS                                                : ;M68MAC ( terminate a MACRO type definition )                         ?M68PAIRS ?M68MAC 0 M68?MAC ! ( Error check & reset )           HERE M68PFA @ 2+ -  ( Compute code length )                     M68PFA @ !  ( Store in length field )                           [COMPILE] FORTH DEFINITIONS ;                           -->                                                                                                                             ( M68K Cross Compiler -- Compiling words - constants    )       FORTH DEFINITIONS HEX                                           : M68CON ( Define a single precision constant )                         :M68MAC 3D C, 3C C, ( MOVE.W #const,-[A6] )                     M68K $CON ( Compile constant )                                  ;M68MAC ;                                               FORTH DEFINITIONS                                               : M68DCON ( Define a double precision constant )                        :M68MAC 2D C, 3C C, ( MOVE.L #const,-[A6] )                     M68K $DCON ( Compile double constant )                          ;M68MAC ;                                               -->                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Compiling words - variables    )       FORTH DEFINITIONS                                               ( n -- )                                                        : M68ALLOT ( Allot n-bytes in variable pool )                           DUP 1 AND IF 1+ ENDIF ( Byte allign )                           M68K M68PVAR +! ; ( Update pointer )                    FORTH DEFINITIONS                                               : M68VAR ( Define a single precision variable )                         M68K M68PVAR @ 2 M68ALLOT ( Get and update pointer )            M68CON ( Define the address as a constant ) ;           FORTH DEFINITIONS                                               : M68DVAR ( Define a double precision variable )                        M68K M68PVAR @ 4 M68ALLOT ( Get and update pointer )            M68CON ( Define the address as a constant ) ;           -->                                                                                                                             ( M68K Cross Compiler -- SUBROUTINE Compiling Words  )          FORTH DEFINITIONS                                               ( Create header and set compiler variables )                    : :M68K ( Begin a SUBROUTINE definition )                               [COMPILE] M68K DEFINITIONS                                      M68K 1 M68K? ! ( Set to compiling )                             <BUILDS HERE M68PFA ! M68PCODE @ DUP                            M68ENTRY ! , ( Store subroutine address )                       DOES> M68SUB ;                                          -->                                                             Note.. a SUBROUTINE definition may call itself if there are     no side effects.  This means that all data altered by the       defined word should be on the stack, not stored in variables.                                                                                                                                                                                                   ( M68K Cross Compiler -- Code output )                          M68K DEFINITIONS                                                ( byte to be sent to code output file -- )                      : M68OUT ( Link to the code output file )                               BASE @ >R HEX . CR R> BASE ! ;                          -->                                                             Note.. the code in the above definition should be replaced      with the appropriate words to send the compiler output to the   code file of your choice.  This could be a disk file, a tape,   your MC68000 computer, a printer, or any other output sink you  may want to use.  The protocall is determined by your output    word.  The compiler does not assume any protocall so it is a    general purpose tool for generating MC68000 code.                                                                                                                                                                                                               ( M68K Cross Compiler -- SUBROUTINE Compiling Words  )          M68K DEFINITIONS HEX                                            : ;M68K ( Terminate a SUBROUTINE definition )                           ?M68PAIRS ?M68K 0 M68K? ! ( Error check & reset )               4E C, 75 C,  ( Compile an RTS instruction )                     HERE M68PFA @ 2+ -  ( Compute code length )                     DUP M68PCODE +! ( Update code pointer )                         M68PFA @ 2+ ( Start of compiled code )                          SWAP 0 DO                                                               DUP C@ M68OUT 1+ ( Output a byte of code )              LOOP DROP                                                       M68PFA @ 2+ DP ! ( Delete code from dictionary )                [COMPILE] FORTH DEFINITIONS ;                           -->                                                                                                                                                                                             ( M68K Cross Compiler -- EXTERNAL )                             M68K DEFINITIONS                                                : $EXTERNAL ( Define entry point as a constant in FORTH voc. )          [COMPILE] FORTH DEFINITIONS                                     M68ENTRY @ CONSTANT ;                                   FORTH DEFINITIONS                                               : EXTERNAL ( Compile an external reference )                            M68K M68K? @ M68?MAC @ OR                                       IF ." Can't use EXTERNAL while compiling"                          CR ABORT ENDIF                                               $EXTERNAL ;                                             -->                                                             Note.. to send the external reference list somewhere else,      replace $EXTERNAL with the appropriate word.  Make sure its     function is equivalent to the above, i.e. it must take the      next word in the input stream as the identifier.                ( M68K Cross Compiler -- Words - literals )                     M68K DEFINITIONS HEX                                            : LITERAL ( Define a single precision literal )                         3D C, 3C C, ( MOVE.W #const,-[A6] )                             $CON ; ( Compile constant )                             : DLITERAL ( Define a double precision literal )                        2D C, 3C C, ( MOVE.L #const,-[A6] )                             $DCON ; ( Compile double constant )                     : BYTES 0 DO 20 WORD HERE NUMBER DROP C, LOOP ;                 -->                                                             Note.. Used as n BYTES followed by bytes to be compiled into    the HOST dictionary.  This word may be used within a :M68K      or :M68MAC definition but NOT within a colon definition.                                                                                                                                                                                                        ( M68K Cross Compiler -- Compiling words - arrays )             M68K DEFINITIONS HEX                                            ( adr -- )                                                      : $M68ARY ( Define code for a single precision array )                  :M68MAC 30 C, 3C C, ( MOVE.W #const,D0 )                        $CON ( Compile address )                                        D0 C, 56 C, D1 C, 56 C,                                         ;M68MAC ;                                               ( adr -- )                                                      : $M68DARY ( Define code for a double precision array )                 :M68MAC 30 C, 3C C, ( MOVE.W #const,D0 )                        $CON ( Compile address )                                        32 C, 16 C, E5 C, 41 C, D0 C, 41 C, 3C C, 80 C,                 ;M68MAC ;                                               -->                                                                                                                             ( M68K Cross Compiler -- Compiling words - arrays )             FORTH DEFINITIONS                                               ( n -- )                                                        : M68ARY ( Define a single precision array n cells long )               M68K M68PVAR @ ( Get base address )                             $M68ARY ( Define the referencing code )                         2* M68ALLOT ( Update variable pointer ) ;               FORTH DEFINITIONS                                               ( n -- )                                                        : M68DARY ( Define a double precision array n cells long )              M68K M68PVAR @ ( Get base address )                             $M68DARY ( Define the referencing code )                        4 * M68ALLOT ( Update variable pointer ) ;              -->                                                                                                                                                                                             ( M68K Cross Compiler -- Compiling words - arrays )             M68K DEFINITIONS HEX                                            ( adr -- )                                                      : $M68CARY ( Define code for a byte array )                             :M68MAC 30 C, 3C C, ( MOVE.W #const,D0 )                        $CON ( Compile address )                                        D1 C, 56 C, ;M68MAC ;                                   FORTH DEFINITIONS                                               ( n -- )                                                        : M68CARY ( Define a byte array n cells long )                          M68K M68PVAR @ ( Get base address )                             $M68CARY ( Define the referencing code )                        M68ALLOT ; ( Update variable pointer )                  ;S                                                                                                                                                                                              ( M68K Cross Compiler -- Control error checking )               M68K DEFINITIONS HEX                                            ( Error checking codes )                                        1 CONSTANT $ECD-IF                                              2 CONSTANT $ECD-BEGIN                                           3 CONSTANT $ECD-DO                                              4 CONSTANT $ECD-WHILE                                           : $ERR-?PAIRS ( Abort if no control structure is started )              M68?PAIRS @ 0=                                                  IF ." No control structure! " ABORT CR ENDIF ;          : $ERR-ABT ( Complete error message and abort )                         ." expected " CR ABORT ;                                : $ERR-IF ( Abort if no IF structure )                                  $ERR-?PAIRS $ECD-IF -                                           IF ." IF structure " $ERR-ABT ENDIF ;                   -->                                                             ( M68K Cross Compiler -- Control error checking )               : $ERR-BEGIN ( Abort if no BEGIN structure )                            $ERR-?PAIRS $ECD-BEGIN -                                        IF ." BEGIN structure " $ERR-ABT ENDIF ;                : $ERR-DO ( Abort if no DO structure )                                  $ERR-?PAIRS $ECD-DO -                                           IF ." DO structure " $ERR-ABT ENDIF ;                   : $ERR-WHILE ( Abort if no WHILE structure )                            $ERR-?PAIRS $ECD-WHILE -                                        IF ." WHILE structure " $ERR-ABT ENDIF ;                -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Control structures )                   ( adr -- )                                                      : $FOR-RES ( Resolve a foreward branch )                                HERE OVER - ( Compute relative address )                        SWAP OVER HIGH-BYTE OVER C! ( Store high byte )                 1+ C! ; ( Store low byte )                              ( adr -- )                                                      : $BAK-RES ( Resolve a back branch )                                    HERE - ( Compute relative address )                             $CON ; ( Compile address )                              -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Control structures )                   ( -- adr ecd )                                                  : IF    ( Compile IF structure, leave address to be resolved )          ( and an error checking code )                                  4A C, 5E C, 67 C, 00 C,                                         HERE $ECD-IF 1 M68?PAIRS +!                                     0 , ; ( Leave space for branch address )                : ELSE  ( Compile an ELSE structure )                                   $ERR-IF 60 C, 00 C,                                             HERE SWAP ( Save current location and get IF adr )              0 , ( Leave space for branch address )                          $FOR-RES ( Resolve IF branch )                                  $ECD-IF ;                                               : ENDIF ( Resolve an IF structure )                                     $ERR-IF $FOR-RES -1 M68?PAIRS +! ;                      : THEN  ENDIF ;         -->                                     ( M68K Cross Compiler -- Control structures )                   ( -- adr ecd )                                                  : BEGIN ( Compile a BEGIN structure )                                   HERE $ECD-BEGIN 1 M68?PAIRS +! ;                        : UNTIL ( Resolve BEGIN .. UNTIL loop )                                 $ERR-BEGIN 4A C, 5E C, 67 C, 00 C,                              $BAK-RES ( Resolve BEGIN branch )                               -1 M68?PAIRS +! ;                                       : AGAIN ( Resolve BEGIN .. AGAIN loop )                                 $ERR-BEGIN 60 C, 00 C,                                          $BAK-RES ( Resolve BEGIN branch )                               -1 M68?PAIRS +! ;                                       -->                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Control structures )                   : WHILE ( Compile WHILE section of loop )                               DUP $ERR-BEGIN 4A C, 5E C, 67 C, 00 C,                          HERE $ECD-WHILE 0 , ; ( Leave space for address )       : REPEAT ( Resolve BEGIN .. WHILE .. REPEAT loop )                      $ERR-WHILE SWAP $ERR-BEGIN                                      60 C, 00 C, ( Code for back branch )                            SWAP $BAK-RES ( Resolve BEGIN branch )                          $FOR-RES ( Resolve WHILE branch )                               -1 M68?PAIRS +! ;                                       -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Control structures )                   : DO ( Compile a DO structure )                                         2F C, 1E C,                                                     HERE $ECD-DO 1 M68?PAIRS +! ;                           : LOOP ( Terminate a DO .. LOOP )                                       $ERR-DO  52 C, 57 C, 4C C, 97 C, 00 C, 03 C,                    B0 C, 41 C, 6D C, 00 C,                                         $BAK-RES ( Resolve DO branch )                                  58 C, 8F C,  ( Drop index and limit )                           -1 M68?PAIRS +! ;                                       -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Control structures )                   : +LOOP ( Terminate a DO .. +LOOP )                                     $ERR-DO  30 C, 1E C, D1 C, 57 C, 4C C, 97 C,                    00 C, 06 C, 4A C, 40 C, 6E C, 04 C, B4 C, 41 C,                 60 C, 02 C, B2 C, 42 C, 6D C, 00 C,                             $BAK-RES ( Resolve DO branch )                                  58 C, 8F C,  ( Drop index and limit )                           -1 M68?PAIRS +! ;                                                                                                       :M68MAC LEAVE 4 BYTES 3F 57 00 02 ;M68MAC                       -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Control structures )                   :M68MAC JSR.W 4 BYTES 30 5E 4E 90 ;M68MAC                       :M68MAC JSR.L 4 BYTES 20 5E 4E 90 ;M68MAC                       :M68MAC JMP.W 4 BYTES 30 5E 4E D0 ;M68MAC                       :M68MAC JMP.L 4 BYTES 20 5E 4E D0 ;M68MAC                       ;S                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( M68K Cross Compiler -- Initialization words )                 M68K DEFINITIONS HEX                                            ( d -- )                                                        : A5LD  ( Load variable pool pointer )                                  2A C, 7C C, $DCON ;                                     : A6LD  ( Load data stack pointer )                                     2C C, 7C C, $DCON ;                                     : A7LD  ( Load return stack pointer )                                   2E C, 7C C, $DCON ;                                     -->                                                             Note.. to create true modular programs there should be an       operating system that loads the appropriate registers and then  calls the module.  In that case these words should be discarded since the address is determined at compile time instead of run  time.                                                                                                                           ( M68K Cross Compiler -- Arithmetic words )                     HEX                                                             :M68MAC + 4 BYTES 30 1E D1 56 ;M68MAC                           :M68MAC - 4 BYTES 30 1E 91 56 ;M68MAC                           :M68MAC * 6 BYTES 30 1E C1 D6 3C 80 ;M68MAC                     :M68MAC / 8 BYTES 4C 9E 00 03 83 C0 3D 01 ;M68MAC               :M68MAC D+ 4 BYTES 20 1E D1 96 ;M68MAC                          :M68MAC D- 4 BYTES 20 1E 91 96 ;M68MAC                          :M68MAC */ A BYTES 32 1E 30 1E C1 D6 81 C1 3C 80 ;M68MAC        :M68MAC /MOD 8 BYTES 42 80 32 1E 30 1E 80 C1                                 4 BYTES 48 40 2D 00 ;M68MAC                        :M68MAC MOD 8 BYTES 42 80 32 1E 30 1E 80 C1                                 4 BYTES 48 40 3D 00 ;M68MAC                         :M68MAC */MOD 8 BYTES 32 1E 30 1E C0 DE 80 C1                                 4 BYTES 48 40 2D 00 ;M68MAC                       -->                                                             ( M68K Cross Compiler -- Arithmetic words )                     :M68MAC U* 6 BYTES 30 1E C0 DE 2D 00 ;M68MAC                    :M68MAC U/MOD A BYTES 32 1E 20 1E 80 C1 48 40 2D 00 ;M68MAC     :M68MAC 1+ 2 BYTES 52 56 ;M68MAC                                :M68MAC 1- 2 BYTES 53 56 ;M68MAC                                :M68MAC 2+ 2 BYTES 54 56 ;M68MAC                                :M68MAC 2- 2 BYTES 55 56 ;M68MAC                                :M68MAC 2* 2 BYTES E1 D6 ;M68MAC                                :M68MAC 2/ 2 BYTES E0 D6 ;M68MAC                                :M68MAC NEGATE 2 BYTES 44 56 ;M68MAC                            :M68MAC MINUS NEGATE ;M68MAC                                    :M68MAC DNEGATE 2 BYTES 44 96 ;M68MAC                           :M68MAC DMINUS DNEGATE ;M68MAC                                  :M68MAC ABS 6 BYTES 4A 56 6C 02 44 56 ;M68MAC                   :M68MAC DABS 6 BYTES 4A 96 6C 02 44 96 ;M68MAC                  -->                                                             ( M68K Cross Compiler -- Stack manipulation )                   :M68MAC DROP 2 BYTES 54 8E ;M68MAC                              :M68MAC 2DROP 2 BYTES 58 8E ;M68MAC                             :M68MAC DUP 2 BYTES 3D 16 ;M68MAC                               :M68MAC 2DUP 2 BYTES 2D 16 ;M68MAC                              :M68MAC SWAP 6 BYTES 20 16 48 40 2C 80 ;M68MAC                  :M68MAC 2SWAP A BYTES 20 16 2C AE 00 04 2D 40 00 04 ;M68MAC     :M68MAC OVER 4 BYTES 3D 2E 00 02 ;M68MAC                        :M68MAC 2OVER 4 BYTES 2D 2E 00 04 ;M68MAC                       :M68MAC >R 2 BYTES 3F 1E ;M68MAC                                :M68MAC R> 2 BYTES 3D 1F ;M68MAC                                :M68MAC I 2 BYTES 3D 17 ;M68MAC                                 :M68MAC I' 4 BYTES 3D 2F 00 02 ;M68MAC                          :M68MAC J 4 BYTES 3D 2F 00 04 ;M68MAC                           -->                                                                                                                             ( M68K Cross Compiler -- Comparison operations )                :M68MAC = 6 BYTES 30 1E 32 1E B2 40                                       8 BYTES 57 C0 02 40 00 01 3D 00 ;M68MAC               :M68MAC < 6 BYTES 30 1E 32 1E B2 40                                       8 BYTES 5D C0 02 40 00 01 3D 00 ;M68MAC               :M68MAC > 6 BYTES 30 1E 32 1E B2 40                                       8 BYTES 5E C0 02 40 00 01 3D 00 ;M68MAC               :M68MAC MIN 6 BYTES 30 1E 32 16 B0 41                                       6 BYTES 6F 02 C1 41 3C 80 ;M68MAC                   :M68MAC MAX 6 BYTES 30 1E 32 16 B0 41                                       6 BYTES 6C 02 C1 41 3C 80 ;M68MAC                   -->                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Comparison operations )                :M68MAC D= 6 BYTES 20 1E 22 1E B2 80                                       8 BYTES 57 C0 02 40 00 01 3D 00 ;M68MAC              :M68MAC D< 6 BYTES 20 1E 22 1E B2 80                                       8 BYTES 5D C0 02 40 00 01 3D 00 ;M68MAC              :M68MAC D> 6 BYTES 20 1E 22 1E B2 80                                       8 BYTES 5E C0 02 40 00 01 3D 00 ;M68MAC              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Comparison operations )                :M68MAC 0= 2 BYTES 4A 5E                                                   8 BYTES 57 C0 02 40 00 01 3D 00 ;M68MAC              :M68MAC NOT 0= ;M68MAC                                          :M68MAC 0< 2 BYTES 4A 5E                                                   8 BYTES 5D C0 02 40 00 01 3D 00 ;M68MAC              :M68MAC 0> 2 BYTES 4A 5E                                                   8 BYTES 5E C0 02 40 00 01 3D 00 ;M68MAC              :M68MAC D0= 2 BYTES 4A 9E                                                   8 BYTES 57 C0 02 40 00 01 3D 00 ;M68MAC             :M68MAC D0< 2 BYTES 4A 9E                                                   8 BYTES 5D C0 02 40 00 01 3D 00 ;M68MAC             :M68MAC D0> 2 BYTES 4A 9E                                                   8 BYTES 5E C0 02 40 00 01 3D 00 ;M68MAC             -->                                                                                                                             ( M68K Cross Compiler -- Comparison operations )                :M68MAC AND 4 BYTES 30 1E C1 56 ;M68MAC                         :M68MAC OR  4 BYTES 30 1E 81 56 ;M68MAC                         :M68MAC XOR 4 BYTES 30 1E B1 56 ;M68MAC                         :M68MAC 1'S 2 BYTES 46 56 ;M68MAC                               -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Memory and I/O operations )            :M68MAC ! 6 BYTES 30 1E 3B 9E 00 00 ;M68MAC                     :M68MAC @ 6 BYTES 30 16 3C B5 00 00 ;M68MAC                     :M68MAC 2! 6 BYTES 30 1E 2B 9E 00 00 ;M68MAC                    :M68MAC 2@ 6 BYTES 30 1E 2D 35 00 00 ;M68MAC                    :M68MAC +! 8 BYTES 30 1E 32 1E D3 75 00 00 ;M68MAC              :M68MAC C! 8 BYTES 30 1E 32 1E 1B 81 00 00 ;M68MAC              :M68MAC C@ A BYTES 30 16 42 41 12 35 00 00 3C 81 ;M68MAC        :M68MAC FILL 8 BYTES 30 1E 32 1E 30 5E D1 CD                                 8 BYTES 60 02 10 C0 51 C9 FF FC ;M68MAC            -->                                                                                                                                                                                                                                                                                                                                                                                             ( M68K Cross Compiler -- Memory and I/O operations )            :M68MAC AW! 4 BYTES 30 5E 30 9E ;M68MAC                         :M68MAC AW@ 4 BYTES 30 56 3C 90 ;M68MAC                         :M68MAC AL! 4 BYTES 20 5E 30 9E ;M68MAC                         :M68MAC AL@ 4 BYTES 20 5E 3D 10 ;M68MAC                         :M68MAC CAW! 6 BYTES 30 5E 30 1E 10 80 ;M68MAC                  :M68MAC CAW@ 8 BYTES 30 56 42 40 10 10 3C 80 ;M68MAC            :M68MAC CAL! 6 BYTES 20 5E 30 1E 10 80 ;M68MAC                  :M68MAC CAL@ 8 BYTES 20 5E 42 40 10 10 3D 00 ;M68MAC            :M68MAC 2AW! 4 BYTES 30 5E 20 9E ;M68MAC                        :M68MAC 2AW@ 4 BYTES 30 5E 2D 10 ;M68MAC                        :M68MAC 2AL! 4 BYTES 20 5E 20 9E ;M68MAC                        :M68MAC 2AL@ 4 BYTES 20 56 2C 90 ;M68MAC                        :M68MAC AFILL 8 BYTES 30 1E 32 1E 20 5E 60 02                                 6 BYTES 10 C0 51 C9 FF FC ;M68MAC                 ;S                                                              ( Definitions required for FORTH-79 )                           : <BUILDS CREATE SMUDGE 0 , ;                                   : ENDIF [COMPILE] THEN ; IMMEDIATE                              ;S                                                              Note.. the above definitions work on my system which is a       combination fig FORTH and FORTH-79.  However, the definition    of <BUILDS may not work with a true FORTH-79 system.  The       compatability depends on how the word DOES> operates in your    system.  For the system described in Leo Brodie's book Starting FORTH the definition would be:                                  : <BUILDS CREATE ;                                              You will need to write an appropriate definition for your       system, the ones given above should serve as guides.                                                                                                                                                                                                            