
------------------------------------------------------------------------

This file contains the basic usage syntax for CRUNCH and UNCRunch pro-
rams, along with a brief description of what the various modes are.
Many additional operational details are contained in the NOTES24.DOC
file, especially details relating to features new to v2.4 vs. v2.3.

Information pertaining to exact locations of "patch bytes", which allow
you to tailor the programs to your own preferences, are contained in a
separate file PATCH24.DOC.

------------------------------------------------------------------------

CRUNCH	v2.4  Usage:

		 Filename	Date, etc.    Option letters
		/	       /	     /
CRUNCH	{du:}<afn>  {du:}  { [id] }  { /<options> }
	  \	      \ 	      |
	   Source      Destination   (space)

where <options> = {Q}{C}{O}{A}

Items in curly brackets are optional (namely everything except for the
filename).  The two optional 'du:' specs may be of the form DU:, UD:, D:
or U: where 'D' is any legal drive letter and 'U' is a user-code from
0-15, inclusive.  The colon MUST be typed.  The first 'du:' specifies
where the filename '<afn>' is located, and it should immediately precede
the <afn> with no intervening blanks if it is used . If no drive is
specified, the	default (currently logged) drive is assumed.  The same
is true for the user code.  The filename <afn> may contain the ambiguous
(wildcard) characters '?' or '*' if desired.

The second 'du:', which has the same form as the one described above, is
an optional drive specifier where the output will be directed.	No file-
name may follow the the second 'du:' - the filename will be generated
automatically (see below).  As above, if either part of the 'du:' speci-
fication is not included (or if the specification is left out alto-
gether), appropriate defaults will be used.  The resulting file will
have the same name as the crunched file, except that the middle letter
of the extension will be converted to "Z".  If the original file's ex-
tension was blank or already had a "Z" in  the	middle, then a filetype
of "ZZZ" will be used.

[id] is an optional "date stamp" (or other information), used to iden-
tify the file.	If used, [id] consists of any text contained between a
pair of square brackets i.e., the brackets must actually be typed.  The
text contained in [id] will be recreated at the console for the opera-
tor's reference when the file is later uncrunched.

Four  command line options, "Q", "C", "O" and "A", are available.  They
may be used in any combination and in any order, but must be preceded by
a single slash and there should be no intervening blanks between option
letters.  The "/" itself must be preceded by a blank. For example:

	CRUNCH *.DOC B0:  /CQ

is a valid command line.
The letters have the following significance:

     Q	Quiet mode toggle
     C	Confirm (tag) mode toggle
     O	Overwrite without prompt mode toggle
     A	Archive bit mode toggle

The "standard distribution" copy of CRUNCH is shipped with all four of
the above modes "off".	The command line option will activate the assoc-
iated mode.  It should be noted that patch bytes in the .COM file allow
a copy of CRUNCH to be configured to default to an user's own preference
(see PATCH24.DOC).  If a mode is configured to default to the "on" state
then an occurrence of the associated letter in the command line will
flip the  option back off.

For example, some users may prefer that CRUNCH generally perform over-
writes without	always prompting.  In a certain situation where the user
wanted to be extra-careful, however, he could temporarily reinstate the
prompt by specifying the /O option.


Following is a brief statement of what each mode does when active:

QUIET MODE:  Simply suppresses the continuous console output normally
supplied by the program while it is processing a file.	May be desirable
if your console is slow, auto-adds LF after CR, is a printing device or
if you just plain don't like watching this kind of activity.

OVERWRITE WITHOUT PROMPT MODE:	Suppresses the question "Destination
File exists, overwrite?"  from being issued everytime the program is
about to overwrite an old file with the same name as the new one.
"Safer" to leave this mode in the default "off" state, but really a
matter of personal preference.	Off-state can hinder "unattended" mass
perations, however, since processing may occasionally be suspended pend-
ing an operator response.

TAG MODE:  An enhanced method for selectively processing certain files
from a wildcard group.	Though vastly more limited, it is obviously
modeled after the SWEEP/NSWP type "tagging" concept, so many users will
feel comfortable with it immediately.  All specified files are displayed
one at a time in alphabetical order.  Only "tag", "untag", "next file"
and "back one file" functions are supported.  After all proper files
have been tagged, the mass operation commences without further user in-
tervention.  See NOTES24.DOC for some some additional notes on this mode.

ARCHIVE BIT MODE:  Allows CRUNCH to be used as an archival type simple
backup program.  Like other "incremental" backup programs, in this mode
CRUNCH will only process files which have been changed since the last
backup, based on the CP/M "archive" directory attribute.  After each
file is processed, the bit will be set indicating the file is now backed
up.  See NOTES24.DZC for some additional notes about this mode as well.
NOTE:  While all other modes and command line options are common to
UNCRunch and CRUNCH, this one is implemented in CRUNCH only.
UNCR  v2.4
Usage:

		Filename   (space)
	       /	    |
 UNCR  {du:}<afn>  {du:}   { /<options> }
	 \	     \		   \
	  Source      Destination   Option letters

where <options> = {Q}{C}{O}

All  usage, options, and patches are identical to CRUNCH, described
above, except  that no [id] can be specified and the /A mode is not im-
plemented.  Also note that the the resulting filename will be recreated
from the name of the file that was originally crunched.


				end
