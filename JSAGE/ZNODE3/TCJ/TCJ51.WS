R60
                      Z-System Corner

               The Trenton Computer Festival

                          Jay Sage


Announcements

   The announcements for this time are about some excitingç
price reductions. A small band of programmers has longç
enjoyed the help of the wonderful DSD (Dynamic Screenç
Debugger) in getting the bugs out of our code. The $130ç
price tag, however, was a deterrent to many. I recentlyç
located and spoke with the author, John Otken, and suggestedç
that there would be a great advantage in reducing the price.ç
More people would get to take advantage of his superbç
program, and he would actually make more money because ofç
the increased sales. He agreed to my suggested price of $50!

   I hope that many more of you will take advantage of thisç
opportunity. DSD is not only a powerful aid in debuggingç
problems with code; it is also a wonderful way to learnç
about how programs work. The full-screen display allows oneç
to see everything that is happening during programç
execution. One sees a section of disassembled source code,ç
the contents of the CPU registers, the contents of theç
stack, and two blocks of memory. In all cases, symbolic asç
well as numeric data can be seen, and all user entries canç
make use of defined symbols.

   There have been two price reductions of interest toç
owners of SB180 computers. XBIOS has been reduced from $75ç
to $50, as a reflection of the fact that it is no longerç
actively supported. We have also acquired the remainingç
stock of the excellent Electronic Technical Servicesç
ETSIO180+ board. Its low power CMOS design includes aç
battery-backed real-time clock, two high speed (115.2 kbps)ç
serial ports, 24 bits of parallel I/O, and an SCSI interfaceç
for hard disk drives. It is fully supported by XBIOS (whichç
is required to run the board). I use the ETSIO180+ on my ownç
computer and have been very satisfied with it. The originalç
price was $280; we will sell the remaining stock (currentlyç
about six boards) for just $100 each (or $145 includingç
XBIOS).


The Trenton Fiascos

   The main contents of my column for this month wereç
originally intended for publication in the printedç
proceedings for this year's Trenton Computer Festival.ç
Although _our_ session there was again a great successç
(because of the speakers), the organization of TCF hasç
deteriorated alarmingly over the past few years.

   When I originally sent in my speaker form for TCF, Iç
checked the box indicating that I would contribute a writtenç
piece. Shortly before the deadline, when they had notç
received my submission, I was called by Sol Libes, who runsç
the conference, asking if I was going to write something. Iç
told him that I was still interested if there was time. Heç
said that it could be accepted if I got it in by the end ofç
the next weekend. We agreed that I would upload it to theç
board run by the Amateur Computer Group of New Jersey. Onceç
it was there, I was to call Sol.

   I worked extremely hard for a couple of days, staying upç
until 3 am to get it finished and uploaded to the ACGNJç
board. As instructed, I placed a voice call to Sol. He wasç
not there, so I left a message on his answering machine.ç
When he did not call back, I called several more times,ç
leaving messages each time. Finally he returned my call, andç
we agreed that he would call me again if there was anyç
problem with the file I had left for him. I never heardç
anything further.

   You can imagine my dismay when I learned during theç
festival that my article had not been included. I still haveç
no idea why, as no one has had the courtesy to contact me.ç
Was its omission deliberate? I'm inclined to think it wasç
administrative incompetence, since most other aspects of theç
conference organization were also handled poorly.

   On my speaker registration form I had checked boxesç
indicating the equipment that I wanted them to supply in ourç
meeting room. My speaker confirmation form indicated thatç
the information had been recorded, but I telephoned theç
program coordinator the day before I drove down just to beç
absolutely sure. Do you think the equipment was there? No.ç
And do you think that anyone at TCF knew what to do aboutç
it? No. We had to struggle through a couple of talks before,ç
almost by accident, we stumbled upon the people who had theç
equipment (no one had told them we needed it).

   I had hoped that the following material would be read byç
an audience that might include many people with CP/Mç
computers who did not know that magazines like TCJ andç
advances like Z-System existed. So that my effort on thisç
composition was not totally wasted, I am presenting it here.


                     CP/M Is Not Dead!

   I'm sure you all know the famous Mark Twain anecdote.ç
Somehow the newspapers picked up a story that he had died. ç
At his next public appearance he delighted in relating thatç
his reported death was, as he put it, "greatly exaggerated." ç
The rumored death of CP/M, the granddaddy of microcomputerç
operating systems, is similarly exaggerated!

   Unfortunately, the erroneous impression about CP/M isç
much harder to correct. Were it simply the result of falseç
reports in the media, one could bring the truth to theç
media's attention and have them publish a correction.ç
Regrettably, the belief that CP/M is dead arises via a ç
mechanism that cannot be used to correct the view.

   I will try here to give you some impression of theç
vitality that continues to flourish in the CP/M world,ç
particularly in connection with the development of the Z≠
System, a highly advanced successor operating system toç
CP/M. While maintaining total compatibility with CP/M andç
its software base, the Z-System brings concepts and featuresç
that are as advanced as can be found on any computerç
anywhere. Nothing can give a 4-MHz Z80 with 64 kilobytes ofç
memory the raw computing horsepower of a 33-MHz 80386ç
microprocessor with several megabytes of memory, but the Z-ç
System can give an old CP/M computer a surprisingly powerfulç
user interface and can turn it into a fun, educational, andç
productive machine.

   At the end of this article, I have listed three magazinesç
with strong CP/M support. By subscribing to them you will beç
able to learn about sources for public-domain programs andç
the names and addresses of vendors who actively supportç
8-bit software and hardware products. You are also welcomeç
to call me.


Why Do People Think CP/M Is Dead?
=================================

   The community did not learn of the death of CP/M, as withç
Mark Twain, by reading a report; they inferred it fromç
personal experience. The mainline computer magazines, suchç
as Byte, gradually carried less and less news about CP/Mç
until eventually they carried none. Why did they stop? ç
Basically because the volume of interest shifted naturallyç
enough to MS-DOS and the newer hardware. There was no longerç
much activity in CP/M hardware development or sales, andç
almost all mainline software houses stopped developing newç
CP/M programs. Soon most of them stopped even offering theirç
old CP/M programs for sale. Some, like Borland, have evenç
gone so far as to deny that CP/M products they once offeredç
were _ever_ offered by their company! (I swear I remember aç
Borland Turbo Modula 2, but many people tell me that whenç
they contact Borland they are _assured_ that Borland _never_ç
offered that product.)

   This situation notwithstanding, a very high level of CP/Mç
activity did continue, but not in the spotlight. There wereç
smaller, specialty magazines that continued to focus onç
hobbyist computing, and there were also smaller softwareç
vendors who continued to support CP/M with great ç
enthusiasm. For veteran CP/M users there was some chance ofç
their learning about these alternate sources of supportç
before the mainline sources shut the door on CP/M, but evenç
many of the veterans lost touch.

   For new owners of CP/M computers -- and though it mightç
surprise you, there are many -- the situation is worse. ç
Typically, they have inherited a retired CP/M computer fromç
a family member, friend, user group, or even a stranger. ç
When they try to contact the sources for CP/M informationç
and support listed in their old documentation, they findç
them to be either out of business totally or at least out ofç
the CP/M business. And these days the sales representativesç
at the software houses have often never even heard of CP/M! ç
No wonder these new CP/M computer owners conclude that CP/Mç
is dead.


The Real Story
==============

   It is natural that the major focus of interest inç
computers will continually shift toward the latest, mostç
advanced, and most widely sold hardware. Nevertheless, aç
tremendous level of activity still exists in the CP/M world,ç
most of it centered on the further development of the Z-ç
System.

   Why would someone still be interested in CP/M? Theç
special spirit that persists in the CP/M world is oneç
important factor. As in the Unix world, there is a veryç
strong sense of community and sharing. This includes a wellç
established tradition of public-domain software, that is,ç
programs written specifically for the benefit of the generalç
community and shared totally with that community. Byç
contrast, the MS-DOS world has what they misleadingly callç
"shareware." These programs are distributed for free, butç
users are told that they must send money to the author ifç
they continue to use them.

   A second attraction in the CP/M world is the intellectualç
challenges and rewards it offers. The relative simplicity ofç
the Z80 microprocessor and the CP/M operating system allowç
easy entry to new programmers. Although extremely rare inç
the DOS world, it is nearly universal in the CP/M world thatç
programs are published with source code. This has severalç
far-reaching consequences. In terms of quality, it meansç
that the development of a program is not limited to theç
conceptual and coding ability of a single author. Others inç
the community can take that source code, make improvementsç
to the program, and return the results to the community.ç
Many of the most important CP/M programs have a very longç
history of development involving many authors.

   Reading source code is also an indispensable vehicle forç
learning about how a computer system works. New programmersç
can quickly learn coding techniques and apply them to newç
applications. Amazingly, source code is available not onlyç
for the numerous utility programs but also for at least ç
some versions of all parts of the operating system as well.

   The seminal event in the survival of CP/M took placeç
almost exactly a decade ago. Richard Conn, eager to make hisç
own contribution to a community that he felt had helped himç
so much, spearheaded a group effort to write replacementç
code for the Console Command Processor (CCP) portion of theç
CP/M operating system. The result, named ZCPR for Z80ç
Command Processor Replacement, was released to the public inç
February, 1982.

   Not much later, I discovered this much improved commandç
processor and installed it on my CP/M computer. Then I didç
something even more significant: I looked at the sourceç
code. To my amazement, I discovered that the operatingç
system, that "holy of holies," is nothing more than a ç
computer program, rather like any other, and that I, albeitç
untrained in systems programming, could not only understandç
it but experiment with changing it! Discoveries like thisç
from reading source code continue to inspire new CP/Mç
hobbyist programmers, and computer bulletin boards and userç
group meetings continue to be scenes of intense discussion.


The Features of Z-System
========================

   The ZCPR command processor has gone through severalç
stages of evolution, and the same approach has now beenç
applied as well to the Basic Disk Operating System (BDOS)ç
component of the CP/M operating system. The combined resultç
is now referred to as the Z-System, and it represents a ç
remarkable point in the development of microcomputerç
operating systems. It has many, many features inspired byç
minicomputer and mainframe operating systems and some notç
available even on those powerful machines. When I use my DOSç
386 machine at work, there are many Z-System features that Iç
sorely miss, and I am constantly amazed at their absenceç
from an operating system whose code is bigger than theç
entire memory address space on a CP/M machine!

   For the most part, the original Digital Research CP/Mç
accomplished in admirable fashion the essential functions itç
was required to perform: to run a few resident commands andç
to load external commands from disk. However, it devotedç
little attention to the user interface and did not provideç
many services to make the operator's life easy. To be fair,ç
of course, CP/M was born in the days when 16K of memory costç
about $500 (in 1970s dollars, no less) and occupied anç
entire S-100 card, roughly the size of the motherboard of aç
modern DOS machine.

   The central goal of the Z-System since the beginning hasç
been to make it easier and more convenient to operate theç
computer. My own ideal has been to have the computer performç
all tasks that it can handle on its own and to leave to theç
user only those tasks that a computer cannot figure out byç
itself. In other words, the computer should take care of allç
the routine matters; the human operator should handle onlyç
the thinking. I will now run through a short summary of Z≠
System features and try to indicate how they make theç
operator's life easier.

User Area Access

   CP/M introduced the concept of disk "user" areas, whichç
allowed the operating system to group files into separateç
logical directories. Unfortunately, CP/M provided noç
practical way to access files across user areas, which madeç
them almost useless.

   Z-System makes it very easy and convenient to organizeç
your files. Where CP/M allowed only a drive prefix in fileç
specifications (e.g., B:TEXT.DOC), Z-System allows driveç
and/or user number prefixes (e.g., A3:WORK.WS) so that filesç
in other user areas as well as other drives can beç
referenced directly. In addition, Z-System allows meaningfulç
names (similar to DOS subdirectory names) to be assigned toç
drive/user areas (so we might have LETTERS:JOE.WS). Thisç
provides an interface that is far more suitable to the wayç
people think and remember.

Terminal Independence and the Environment

   While some would argue that the DOS hardware and softwareç
standards established by IBM's market dominance haveç
resulted in an enforced mediocrity, there is no doubt thatç
having a single environment in which to operate makes lifeç
much easier for applications programmers. Programs for DOSç
generally work right out of the box on any IBM-compatibleç
computer. Configuration is required only for fine-tuning.

   CP/M, on the other hand, was designed to allow programsç
to run on an extremely wide variety of hardware. In thoseç
days, "personal" computer took on a different meaning --ç
each person designed and built his own hardware. CP/M couldç
be made to work with all of them, but elaborate ç
configuration procedures were generally required, especiallyç
to match programs to the particular terminal used. To thisç
day, we still have to deal with this hardware diversity.

   What CP/M could have provided, but didn't, was a meansç
for conveying to application programs information about theç
operating environment. Z- System has several modules thatç
afford such communication. An area called the environmentç
descriptor (ENV) contains information about the system ç
configuration. Another system area called the message bufferç
(MSG) stores information that one program can leave for useç
by another program that runs later.

   Part of the ENV is a section called the TCAP or Terminal≠
CAPability descriptor (if you know Unix, you will recognizeç
this). When the appropriate TCAP has been loaded, a Z-Systemç
program will automatically use the right video control codesç
for that terminal.

Command Processing Enhancements

   Under CP/M, you had to specify where the COM file to beç
run was located (otherwise the current drive was assumed). ç
This is a perfect example of something that a computer canç
easily be smart enough to do for you, and Z-System does. Asç
with modern versions of DOS (which took many years to catchç
on to this Z-System feature), you specify a list ofç
directory areas that the operating system will scan for aç
requested COM file. Unlike DOS, Z-System does not insistç
that the current directory be first in the path; it canç
appear wherever you want it to, or not at all.

   With Z-System one is also no longer limited to issuingç
commands one at a time (DOS has been even slower to catch onç
to this). A single line of command input can contain a wholeç
sequence of commands. As a result, you do not have toç
interrupt your thinking to wait for one command to finish ç
before you can specify the second and subsequent steps in aç
process. You can work out a strategy for what you want toç
accomplish and issue all the commands at once, before youç
forget or get confused.

   Many oft-repeated computational tasks involve sequencesç
of commands (e.g., editing, spell-checking, printing). Inç
such cases, the Z-System alias facility (similar in someç
ways to CP/M's submit or DOS's batch operations but far moreç
flexible -- more akin to Unix scripts) can be used to defineç
a new command name, which, when invoked, performs the entire ç
sequence. This saves the user a lot of typing but moreç
importantly eliminates the need to remember exactly what theç
sequence is. Basically, you solve the problem once and putç
the solution into an alias script. From then on, theç
computer is smart enough to take care of the complex ç
details for you.

Conditional Command Execution

   There is only so much one can accomplish on a computerç
(or in life) without making decisions. Have you ever seen aç
programming language with no ability to perform tests andç
act in different ways depending on the results? Flow controlç
(IF/ELSE/ENDIF) is unique to the Z-System command ç
processor. Other operating systems that offer flow controlç
at all limit it to operation inside a batch or scriptç
language. A special set of Z-System commands can test a wideç
range of conditions, and the tests can be nested to a depthç
of eight levels.

Command Processor Shells

   If you do not want to deal with the operating system atç
the command level or if you want to have a command processorç
with extended features, the Z-System shell facility allowsç
you to install substitute user interfaces of your own choiceç
at will. They can even be nested within each other.

   Shells come in two common varieties: menu shells andç
history shells. The menu interfaces allow the user to pickç
tasks with single keystrokes and have the shell programç
generate the complex sequences of commands required toç
perform those tasks. The menu system shields the user from ç
complexity, saves typing, and greatly reduces the chance ofç
error.

   History shells are enhanced command processors thatç
remember your commands and allow you to recall and editç
previous command lines. I wish the Apollo Domainç
minicomputer system I use at work (not to mention my DOS ç
computer) had a history shell as nice as Z-System's LSH. Itç
works like a wordprocessor on the command history, allowingç
searching and extensive editing.

What If You Make a Mistake

   This is one of the other areas in which most operatingç
systems behave in an abominably primitive manner. When youç
issue a command that cannot be performed, they just issue anç
error message and then dump you back to square one. Oftenç
you are not even told what sort of error occurred (considerç
DOS's wonderfully helpful "bad command" message).

   The Z-System behaves in a civilized manner under theseç
circumstances. When an error occurs, the command processorç
turns the bad command line over to a user-specified errorç
handler. The most sophisticated error handlers allow theç
operator to edit the command and thus recover easily fromç
typing mistakes.

   The system environment even contains an error type, whichç
the error handler can use to give you more specificç
information about what went wrong. It may be the familiarç
error of a COM file that could not be found, but there areç
many other possible causes for the difficulty. A file that ç
you specified as an argument might not have been foundç
(e.g., "TYPE FILENAM" when you meant "TYPE FILENAME"), orç
you may have specified an ambiguous file name to a programç
that cannot accept one (e.g., "TYPE *.DOC").

System Security

   Like minicomputer and mainframe operating systems, the Z≠
System is a secure operating system. This means that it hasç
mechanisms for limiting what any particular user can do orç
get access to. Commands that perform dangerous operationsç
(such as erasing, copying, or renaming files) can be ç
disabled when ordinary users are operating the system butç
enabled when a privileged user is at work. Areas of yourç
disk can be restricted from access for storage ofç
confidential or other sensitive information. These securityç
features come in very handy in the implementation of aç
remote access system or bulletin board.

Summary

   To sum it up, the goal of the Z-System is to provide anç
operating environment that can be tailored extensively toç
user preferences and that can be made to handle on its ownç
and automatically as many computational details as it can,ç
leaving the user free to concentrate solely on those ç
aspects of computer operation that require humanç
intelligence.


Z-System, The State of the CP/M Art
===================================

   Now that you've seen the remarkable features of the Z≠
System, you might be curious about how it can be installedç
on your CP/M computer. In this regard, the most spectacularç
step in the evolution of Z-System took place about threeç
years ago. At that time some major programming breakthroughs ç
made it possible to configure and install the Z-System as ifç
it were an application program running on the CP/M computer. ç
Before that, you really had to be a rather skilled assemblyç
language programmer to get Z-System running.

   The new Z-System comes in two flavors: NZCOM forç
computers that use version 2.2 of CP/M and Z3PLUS forç
computers running CP/M-Plus. Joe Wright, Bridger Mitchell,ç
and I were the main developers.

   NZCOM and Z3PLUS embody, I believe, some of the mostç
exciting and remarkable developments in the history ofç
microcomputer operating systems. With all the microcomputersç
I have had experience with, the operating system has been aç
static entity. You boot up the computer, and there you haveç
the operating system, fixed and immutable. Few computersç
offer more than one operating system. With those that do,ç
changing the operating system usually requires rebooting andç
starting over. And never do you, the user, get to define theç
characteristics of the operating system. You just take whatç
the manufacturer decides to give you.

   With NZCOM and Z3PLUS the operating system becomes aç
flexible tool just like an application program. You canç
change operating system configurations at any time, evenç
right in the middle of a multiple command line sequence. Youç
can do it manually, or alias scripts can do it ç
automatically in response to conditions in the system!

   You can change the whole operating system or just a partç
of it. Would you like a different command processor? Noç
problem. With a simple command, NZCOM or Z3PLUS will loadç
another one. No assembly or configuration is required. Ifç
you want to experiment with a new disk operating systemç
(BDOS), NZCOM can load a new one in a jiffy. This makes forç
a whole new world of flexibility and adaptability, learningç
and experimentation.

   Do you need more memory to run a big application program? ç
Fine. While that application is running, just load a smallç
operating system without some of the bells and whistles. ç
Then, after that task is finished, go back to the big systemç
with named directories, lots of resident commands, orç
special input/output facilities (such as keyboard redefinersç
or redirection of screen or printer output to disk). Untilç
you try NZCOM or Z3PLUS, it is hard to imagine how easy itç
is to do these things.


Sources of Support
==================

   Here are three magazines that provide significant CP/Mç
support. By reading them you will learn about sources forç
public-domain software (both by modem and on disk) and aboutç
vendors who sell CP/M commercial software (a vendor listing,ç
CPMSRC.LST, posted on bulletin boards runs to 15 printedç
pages).

   The major, professional publication with strong coverageç
of Z-System and CP/M is "The Computer Journal." Its sixç
issues per year have a broad hobbyist focus, with articlesç
on several operating systems, programming languages,ç
embedded controllers, hardware projects, and many otherç
topics.

		The Computer Journal ($18/yr)
		P.O. Box 12
		S. Plainfield, NJ 07080-0012
		voice: 908-755-6186
		modem (Z-Node #32): 908-754-9067
		on GEnie as $TCJ

Two other, more informal magazines of interest to the 8-bitç
community are:

		The Z-Letter ($15/yr)
		Lambda Software Publishing
		720 S. Second Street
		San Jose, CA 95112
		voice: 408-293-5176

		Eight Bits and Change ($15/yr)
		Small Computer Support
		24 East Cedar Street
		Newington, CT 06111
		voice: 203-666-3139
		modem (Z-Node #12): 203-665-1100.
                                              